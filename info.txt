1. authorization type
    Inline authorization
    if(Auth::guest()) {
            return redirect("/login");
        }
        
        if ($job->employer->user->isNot(Auth::user())){
            abort(403);
        }


2. Gates :
    use Illuminate\Support\Facades\Gate;
    Gate::define('edit-job', function(User $user, Job $job){
            return $job->employer->user->is($user);
        });


        if(Auth::guest()) {
            return redirect("/login");
        }
        
        // if ($job->employer->user->isNot(Auth::user())){
        //     abort(403);
        // }

        Gate::authorize('edit-job', $job);



3. Define Gates inside app service provider:
     public function boot(): void
    {
        // To Disable the lazy loading we just need to do the below step
        // Model::preventLazyLoading();

        // Gate::define('edit-job', function(?User $user, Job $job){
        Gate::define('edit-job', function(User $user, Job $job){
            return $job->employer->user->is($user);
        });
    }
    Gate::authorize('edit-job', $job);


4. Can or cannot insteda of Gate::authorize() 
    Auth::user()->can('edit-job', $job);
    @can('edit-job', $job)
        <p class="mt-6">
            <x-button href="/jobs/{{ $job->id }}/edit">Edit Job</x-button>
        </p>    
    @endcan

5. Middleware
    Route::get('/jobs/{job}/edit', 'edit')->middleware(['auth', 'can:edit-job, job']);
    Route::get('/jobs/{job}/edit', 'edit')->middleware('auth')->can("edit-job", 'job');

6. Polices
    <?php

namespace App\Policies;

use App\Models\Job;
use App\Models\User;
use Illuminate\Auth\Access\Response;

class JobPolicy
{
    public function edit(User $user, Job $job)
    {
        return $job->employer->user->is($user);

    }
    // /**
    //  * Determine whether the user can view any models.
    //  */
    // public function viewAny(User $user): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can view the model.
    //  */
    // public function view(User $user, Job $job): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can create models.
    //  */
    // public function create(User $user): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can update the model.
    //  */
    // public function update(User $user, Job $job): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can delete the model.
    //  */
    // public function delete(User $user, Job $job): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can restore the model.
    //  */
    // public function restore(User $user, Job $job): bool
    // {
    //     //
    // }

    // /**
    //  * Determine whether the user can permanently delete the model.
    //  */
    // public function forceDelete(User $user, Job $job): bool
    // {
    //     //
    // }
}
